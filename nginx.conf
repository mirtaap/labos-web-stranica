#user  nobody;
worker_processes  1;
            
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
    
#pid        logs/nginx.pid;
    
    
events {
    worker_connections  1024;
}           
    
        
http {
    include       mime.types;
    default_type  application/octet-stream;   
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
            
    #access_log  logs/access.log  main;
        
    sendfile        on;
    #tcp_nopush     on;
    #keepalive_timeout  0;
    keepalive_timeout  65;
    
    #gzip  on;
            
    server {
        listen       8080;
        server_name  localhost;
    
        #charset koi8-r;       #access_log  logs/host.access.log  main;
    
        location / {
            root   html;
            index  index.html index.htm;
        }
        
        #error_page  404              /404.html;
        
        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
         
        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {     #    proxy_pass   http://127.0.0.1;
        #}
        
        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}
        
        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }       
          
    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;
          
    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    
    
    # HTTPS server with HTTP/2 enabled
    server {
        listen       443 ssl;
        http2;  # added 'http2' for HTTP/2 support
        server_name  localhost;
    
        # SSL certificate paths
        ssl_certificate      /Users/mirtaposnjak/ssl/nginx/nginx.crt;
        ssl_certificate_key  /Users/mirtaposnjak/ssl/nginx/nginx.key;
    
        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;
    
        # SSL ciphers
        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;   
    
        location / {
            root   /usr/local/var/www/lab4;  # Path to your HTML files
            index  index.html index.htm;
        }
    }
    
    # HTTP server to redirect to HTTPS
    server {
        listen       80;
        server_name  localhost;
        return 301 https://$host$request_uri;  # Redirect to HTTPS
    }
    
    include servers/*;
}

